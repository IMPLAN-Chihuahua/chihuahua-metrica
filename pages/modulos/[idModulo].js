import Head from 'next/head';
import Item from '@components/Indicador/Card/Item';
import Stack from '@mui/material/Stack';
import Pagination from '@mui/material/Pagination';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import { Autocomplete, TextField, Typography } from '@mui/material';

export default function Modulo(props) {
    const data = props.data;
    const idModulo = props.idModulo;
    const totalPages = props['total_pages'];
    const indicadores = data.map(indicador => {
        return (<Item indicador={indicador} key={indicador.id} />)
    });
    const listOds = ['test 1', 'test 2', 'test 3'];
    const start = new Date().getFullYear();
    const end = start - 15;
    const yearList = [...Array(start - end + 1).keys()].map(x => start - x);
    return (
        <div>
            <Head>
                <title>Indicadores</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Container maxWidth='xl'>
                <h1>Indicadores Modulo {idModulo}</h1>
                <Grid
                    container
                    sx={{
                        backgroundColor: 'info.main',
                        marginBottom: 4
                    }}
                    borderRadius={2}
                >
                    <Grid
                        item
                        container
                        padding={2}
                        rowSpacing={2}
                        columnSpacing={2}
                        direction='column'

                    >
                        <Grid item>
                            <Typography variant='h5' component='h2'>
                                Filtrar Indicadores
                            </Typography>
                        </Grid>
                        <Grid item container direction='row' columnSpacing={2} rowSpacing={2}>
                            <Grid item xs={12} md={4} lg={3}>
                                <Autocomplete
                                    disablePortal
                                    id='cbx-tematica'
                                    options={listOds}
                                    noOptionsText='No hay opciones'
                                    renderInput={(params) => <TextField {...params} label='Ods' />}
                                />
                            </Grid>
                            <Grid item xs={12} md={4} lg={3}>
                                <Autocomplete
                                    disablePortal
                                    id='cbx-medida'
                                    options={listOds}
                                    noOptionsText='No hay opciones'
                                    renderInput={(params) => <TextField {...params} label='Unidad de Medida' />}
                                />
                            </Grid>
                            <Grid item xs={12} md={4} lg={3}>
                                <Autocomplete
                                    disablePortal
                                    id='cbx-year'
                                    options={yearList}
                                    noOptionsText='No hay opciones'
                                    renderInput={(params) => <TextField {...params} label='Año' />}
                                />
                            </Grid>
                            <Grid item xs={12} md={4} lg={3}>
                                <Autocomplete
                                    disablePortal
                                    id='cbx-fuente'
                                    options={listOds}
                                    noOptionsText='No hay opciones'
                                    renderInput={(params) => <TextField {...params} label='Fuente Información' />}
                                />
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>
                <Stack
                    spacing={2}
                    alignItems='stretch'
                    justifyContent='space-around'
                >
                    {indicadores}
                </Stack>
                <Pagination count={totalPages}
                    showFirstButton
                    showLastButton
                    sx={{ display: 'flex', justifyContent: 'center', marginTop: 5 }} />
            </Container>
        </div>
    );
};

export async function getServerSideProps(context) {
    const idModulo = context.params.idModulo;
    const res = await fetch(`${process.env.INDICADORES_BASE_URL}/modulos/${idModulo}/indicadores`);
    const data = await res.json();
    if (res.status === 200) {
        return {
            props: { ...data, idModulo }
        }
    } else
        return {
            props: {
                idModulo,
                data: []
            }
        }

    return {
        props: {},
    }
};